{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jaylenthomas/Downloads/modot_web/titanv2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/jaylenthomas/Downloads/modot_web/titanv2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Users/jaylenthomas/Downloads/modot_web/titanv2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { auth, db } from 'auth/FirebaseAuth';\nvar FirebaseService = {};\n\nFirebaseService.fetchUserInfo = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(uid) {\n    var userRef;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            userRef = db.collection('users').doc(uid);\n            _context.next = 3;\n            return userRef.get().then(function (userInfo) {\n              if (userInfo.exists) {\n                return _objectSpread({}, userInfo.data());\n              } else {\n                return {\n                  message: \"The user doesn't exist in DB\"\n                };\n              }\n            });\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nFirebaseService.signInEmailRequest = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(email, password) {\n    var userCredential, idToken, user, userRef;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return auth.signInWithEmailAndPassword(email, password).then(function (user) {\n              return user;\n            }).catch(function (err) {\n              return err;\n            });\n\n          case 2:\n            userCredential = _context2.sent;\n\n            if (!userCredential.message) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", userCredential);\n\n          case 5:\n            _context2.next = 7;\n            return auth.currentUser.getIdToken(true).then(function (token) {\n              return token;\n            });\n\n          case 7:\n            idToken = _context2.sent;\n            user = userCredential.user;\n            userRef = db.collection('users').doc(user.uid);\n            _context2.next = 12;\n            return userRef.get().then(function (docSnapshot) {\n              if (docSnapshot.exists) {\n                return _objectSpread(_objectSpread({}, docSnapshot.data()), {}, {\n                  idToken: idToken\n                });\n              } else {\n                return {\n                  message: \"The user doesn't exist in DB\"\n                };\n              }\n            });\n\n          case 12:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nFirebaseService.signOutRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return auth.signOut().then(function (userCredential) {\n            return userCredential;\n          }).catch(function (err) {\n            return err;\n          });\n\n        case 2:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _callee3);\n}));\n\nFirebaseService.signUpEmailRequest = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(name, email, password) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return auth.createUserWithEmailAndPassword(email, password).then( /*#__PURE__*/function () {\n              var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(userCredential) {\n                var idToken, userInfo;\n                return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        _context4.next = 2;\n                        return userCredential.user.getIdToken(true).then();\n\n                      case 2:\n                        idToken = _context4.sent;\n                        userInfo = {\n                          name: name,\n                          email: email,\n                          uid: userCredential.user.uid\n                        };\n                        _context4.next = 6;\n                        return db.collection('users').doc(userCredential.user.uid).set(userInfo).then();\n\n                      case 6:\n                        return _context4.abrupt(\"return\", _objectSpread(_objectSpread({}, userInfo), {}, {\n                          idToken: idToken\n                        }));\n\n                      case 7:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4);\n              }));\n\n              return function (_x7) {\n                return _ref5.apply(this, arguments);\n              };\n            }()).catch(function (err) {\n              return err;\n            });\n\n          case 2:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 3:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function (_x4, _x5, _x6) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nexport default FirebaseService;","map":{"version":3,"sources":["/Users/jaylenthomas/Downloads/modot_web/titanv2/src/services/FirebaseService.js"],"names":["auth","db","FirebaseService","fetchUserInfo","uid","userRef","collection","doc","get","then","userInfo","exists","data","message","signInEmailRequest","email","password","signInWithEmailAndPassword","user","catch","err","userCredential","currentUser","getIdToken","token","idToken","docSnapshot","signOutRequest","signOut","signUpEmailRequest","name","createUserWithEmailAndPassword","set"],"mappings":"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","sourcesContent":["import { auth, db } from 'auth/FirebaseAuth';\n\nconst FirebaseService = {}\n\nFirebaseService.fetchUserInfo = async (uid) => {\n  const userRef = db.collection('users').doc(uid);\n  return await userRef.get().then(userInfo => {\n    if (userInfo.exists) {\n      return {\n        ...userInfo.data()\n      }\n    } else {\n      return { message: \"The user doesn't exist in DB\" }\n    }\n  })\n}\n\nFirebaseService.signInEmailRequest = async (email, password) => {\n  const userCredential = await auth.signInWithEmailAndPassword(email, password).then(user => user).catch(err => err);\n  if (userCredential.message) return userCredential;\n  const idToken = await auth.currentUser.getIdToken(true).then(token => token);\n  const user = userCredential.user;\n  const userRef = db.collection('users').doc(user.uid);\n  return await userRef.get().then(docSnapshot => {\n    if (docSnapshot.exists) {\n      return {\n        ...docSnapshot.data(),\n        idToken\n      }\n    } else {\n      return { message: \"The user doesn't exist in DB\" }\n    }\n  });\n}\n\nFirebaseService.signOutRequest = async () =>\n  await auth.signOut().then(userCredential => userCredential).catch(err => err);\n\nFirebaseService.signUpEmailRequest = async (name, email, password) => {\n  return await auth\n    .createUserWithEmailAndPassword(email, password)\n    .then(async userCredential => {\n      const idToken = await userCredential.user.getIdToken(true).then();\n      const userInfo = {\n        name,\n        email,\n        uid: userCredential.user.uid,\n      }\n      await db.collection('users').doc(userCredential.user.uid).set(userInfo).then();\n      return {\n        ...userInfo,\n        idToken\n      }\n    })\n    .catch(err => err);\n}\n\nexport default FirebaseService"]},"metadata":{},"sourceType":"module"}